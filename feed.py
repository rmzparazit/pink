import os
import json
import time
import random
import hashlib
import re
import shutil
from datetime import datetime
from urllib.parse import quote
from playwright.sync_api import sync_playwright

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
OUTPUT_DIR = "output_pinkypunk"
os.makedirs(OUTPUT_DIR, exist_ok=True)

USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
BASE_URL = "https://pinkypunk.ru/catalog"

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º (–¢–µ–ø–µ—Ä—å XML!)
PROGRESS_FILE = os.path.join(OUTPUT_DIR, "progress.json")
XML_FILE = os.path.join(OUTPUT_DIR, "pinkypunk_catalog.xml")  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ .xml
TEMP_XML_FILE = XML_FILE + ".tmp"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
log = logging.info

def get_image_url(vendor_code):

    GITHUB_USER = "rmzparazit"
    REPO_NAME = "pink"
    BRANCH = "main"
    
    image_path = f"images/{vendor_code}.png"
    raw_url = f"https://raw.githubusercontent.com/{GITHUB_USER}/{REPO_NAME}/{BRANCH}/{image_path}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (—á–µ—Ä–µ–∑ HEAD-–∑–∞–ø—Ä–æ—Å)
    # –≠—Ç–æ –≤–∞–∂–Ω–æ ‚Äî —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —Ñ–∏–¥, –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç
    import requests
    try:
        response = requests.head(raw_url, timeout=5)
        if response.status_code == 200:
            log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {vendor_code}: {raw_url}")
            return raw_url
        else:
            log(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è {vendor_code} (HTTP {response.status_code})")
            return None
    except Exception as e:
        log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {vendor_code}: {e}")
        return None

def load_collection_mapping():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ collection_id ‚Üí vendorCode –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏–∑ images/."""
    mapping_file = os.path.join(OUTPUT_DIR, "collection_mapping.json")
    if os.path.exists(mapping_file):
        try:
            with open(mapping_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ collection_mapping.json: {e}")
    return {}

def load_progress():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists(PROGRESS_FILE):
        try:
            with open(PROGRESS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    return {"products": []}


def save_progress(products):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ —Ñ–∞–π–ª."""
    try:
        clean = [p for p in products if p.get('vendorCode') and p.get('name') and p.get('link')]
        seen = set()
        unique = []
        for p in clean:
            link = p['link'].strip().split('#')[0]
            if not link or '#order' in link or link.endswith('/'):
                continue
            if link not in seen:
                seen.add(link)
                unique.append(p)
        with open(PROGRESS_FILE, 'w', encoding='utf-8') as f:
            json.dump({"products": unique}, f, ensure_ascii=False, indent=4)
        log(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {len(unique)} —Ç–æ–≤–∞—Ä–æ–≤")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


def extract_collections(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π (–∫–∞—Ç–µ–≥–æ—Ä–∏–π) —Å –∏—Ö ID, –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏."""
    collections = []
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π, –∫—Ä–æ–º–µ "–í—Å–µ"
        switchers = page.query_selector_all('.js-store-parts-switcher:not(.t-store__parts-switch-btn-all)')
        for switcher in switchers:
            name = switcher.inner_text().strip()
            uid = switcher.get_attribute('data-storepart-uid') or ""
            link_fragment = switcher.get_attribute('data-storepart-link') or ""
            if name and uid and name != "–í—Å–µ":
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º fragment –≤ —Ä–µ–∞–ª—å–Ω—ã–π URL
                # –ü—Ä–∏–º–µ—Ä: "#!/tstore/r/757983339/c/435183164492-–ú–∞—Å—Ç—É—Ä–±–∞—Ç–æ—Ä—ã"
                # -> https://pinkypunk.ru/catalog?tfc_storepartuid%5B757983339%5D=–ú–∞—Å—Ç—É—Ä–±–∞—Ç–æ—Ä—ã&tfc_div=:::
                if '/c/' in link_fragment:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ—Å–ª–µ UID
                    collection_name_in_url = link_fragment.split('-')[-1] if '-' in link_fragment else name
                    # URL-–∫–æ–¥–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                    encoded_name = quote(collection_name_in_url)
                    full_url = f"https://pinkypunk.ru/catalog?tfc_storepartuid%5B757983339%5D={encoded_name}&tfc_div=:::"
                else:
                    full_url = f"https://pinkypunk.ru/catalog"

                collections.append({
                    'id': uid,
                    'name': name,
                    'url': full_url.strip()
                })
        log(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(collections)} –∫–æ–ª–ª–µ–∫—Ü–∏–π: {[c['name'] for c in collections]}")
    except Exception as e:
        log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {e}")
    return collections


def parse_catalog_page(page):
    """–ë—ã—Å—Ç—Ä–æ –∏ –Ω–∞–¥—ë–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç –∫–∞—Ç–∞–ª–æ–≥ –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, —Ç–æ–ª—å–∫–æ —Å –≥–ª–∞–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü."""
    log("üì¶ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π...")
    all_products = []
    collections = []

    try:
        # --- –®–ê–ì 1: –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ---
        page.goto(BASE_URL, timeout=60000)
        page.wait_for_timeout(5000)
        collections = extract_collections(page)

        # --- –®–ê–ì 2: –ü–∞—Ä—Å–∏–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ‚Äî –û–î–ò–ù –†–ê–ó! ---
        for coll in [None] + collections:  # None = –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if coll is None:
                url = BASE_URL
                log("‚û°Ô∏è –ü–∞—Ä—Å–∏–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞...")
            else:
                url = coll.get('url')
                log(f"‚û°Ô∏è –ü–∞—Ä—Å–∏–º –∫–æ–ª–ª–µ–∫—Ü–∏—é: {coll['name']} ({url})")
                page.goto(url, timeout=60000)
                page.wait_for_timeout(3000)

            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–Ω–∏–∑ ‚Äî —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
            last_height = page.evaluate("document.body.scrollHeight")
            while True:
                page.evaluate("window.scrollTo(0, document.body.scrollHeight);")
                time.sleep(2)
                new_height = page.evaluate("document.body.scrollHeight")
                if new_height == last_height:
                    break
                last_height = new_height

            # –ò—â–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
            product_elements = page.query_selector_all('.js-product.t-store__card')
            log(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(product_elements)} –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤.")

            for card in product_elements:
                try:
                    # üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"?
                    buy_button = card.query_selector('.js-store-prod-btn2')
                    if not buy_button:
                        continue
                    button_text = buy_button.inner_text().strip()
                    is_disabled = "t-store__prod-popup__btn_disabled" in (buy_button.get_attribute("class") or "")
                    if is_disabled or button_text == "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏":
                        log("üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä ‚Äî –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.")
                        continue

                    # --- –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä—è–º–æ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ ---
                    name_el = card.query_selector('.js-store-prod-name')
                    name = name_el.inner_text().strip() if name_el else ""
                    if not name:
                        continue

                    sku_el = card.query_selector('.js-store-prod-sku')
                    vendorCode = sku_el.inner_text().replace('–ê—Ä—Ç–∏–∫—É–ª:', '').strip() if sku_el else ""
                    if not vendorCode:
                        hash_input = f"{name}_{int(time.time())}"
                        vendorCode = f"PP_{hashlib.md5(hash_input.encode()).hexdigest()[:8].upper()}"

                    link_el = card.query_selector('a[href]:not([href="#order"])')
                    link = link_el.get_attribute('href').strip() if link_el else ""
                    if not link or link == BASE_URL or link.endswith('#') or '#order' in link:
                        continue

                    price_el = card.query_selector('.js-product-price')
                    price = "0"
                    if price_el:
                        data_price = price_el.get_attribute('data-product-price-def')
                        if data_price and data_price != '0':
                            price = data_price
                        else:
                            text = price_el.inner_text().replace(' ', '').replace('—Ä.', '').replace('‚ÇΩ', '')
                            match = re.search(r'\d+', text)
                            if match:
                                price = match.group(0)

                    img_el = card.query_selector('.js-product-img')
                    image = img_el.get_attribute('data-original') or img_el.get_attribute('src') or "" if img_el else ""
                    image = image.strip()

                    additional_images = []
                    second_img = card.query_selector('.t-store__card__bgimg_second')
                    if second_img:
                        second_src = second_img.get_attribute('data-original') or second_img.get_attribute('src') or ""
                        second_src = second_src.strip()
                        if second_src and second_src != image:
                            additional_images.append(second_src)

                    descr_el = card.query_selector('.js-store-prod-descr')
                    description = descr_el.inner_text().strip() if descr_el else ""

                    part_uid = card.get_attribute('data-product-part-uid') or ""
                    collection_id = part_uid.split(',')[0].strip() if part_uid else ""

                    product_data = {
                        'name': name,
                        'vendorCode': vendorCode,
                        'link': link,
                        'image': image,
                        'additional_images': additional_images,
                        'price': price,
                        'description': description,
                        'collection_id': collection_id,
                        'collection': 'default'
                    }

                    all_products.append(product_data)
                    log(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {name} | –ê—Ä—Ç: {vendorCode} | –¶–µ–Ω–∞: {price} ‚ÇΩ")

                except Exception as e:
                    log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
                    continue

        # --- –®–ê–ì 3: –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ vendorCode ---
        seen_codes = set()
        unique_products = []
        for prod in all_products:
            code = prod.get('vendorCode')
            if code and code not in seen_codes:
                seen_codes.add(code)
                unique_products.append(prod)
            else:
                log(f"üîÑ –£–¥–∞–ª—ë–Ω –¥—É–±–ª–∏–∫–∞—Ç —Ç–æ–≤–∞—Ä–∞: {prod.get('name')} (–∞—Ä—Ç–∏–∫—É–ª: {code})")

        log(f"üì¶ –í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(unique_products)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–≤ –Ω–∞–ª–∏—á–∏–∏).")
        return unique_products, collections

    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        return [], []

def parse_product_cards(page):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π ‚Äî –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è."""
    products = []
    try:
        product_elements = page.query_selector_all('.js-product.t-store__card')
        log(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(product_elements)} –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")

        for card in product_elements:
            try:
                # --- –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –∏ vendorCode ---
                link_el = card.query_selector('a[href]:not([href="#order"])')
                link = link_el.get_attribute('href').strip() if link_el else ""
                if not link or link == BASE_URL or link.endswith('#') or '#order' in link:
                    continue

                sku_el = card.query_selector('.js-store-prod-sku')
                vendorCode = sku_el.inner_text().replace('–ê—Ä—Ç–∏–∫—É–ª:', '').strip() if sku_el else ""
                if not vendorCode:
                    name_el = card.query_selector('.js-store-prod-name')
                    name = name_el.inner_text().strip() if name_el else ""
                    hash_input = f"{name}_{int(time.time())}"
                    vendorCode = f"PP_{hashlib.md5(hash_input.encode()).hexdigest()[:8].upper()}"

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –∏ –∞—Ä—Ç–∏–∫—É–ª ‚Äî –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±—É–¥–µ—Ç —Å–æ–±—Ä–∞–Ω–æ –ø–æ–∑–∂–µ
                product_data = {
                    'link': link,
                    'vendorCode': vendorCode,
                    'name': '',  # –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ
                    'image': '',
                    'additional_images': [],
                    'price': '0',
                    'description': '',
                    'collection_id': '',
                    'collection': 'default'
                }

                products.append(product_data)

            except Exception as e:
                log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
                continue

    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")

    return products


def generate_xml(products, collections):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç XML-—Ñ–∏–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö."""
    log("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è XML-—Ñ–∏–¥–∞...")
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏
    drive_mapping = load_image_mapping()           # –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤
    collection_mapping = load_collection_mapping() # –î–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π

    header_lines = [
        '<?xml version="1.0" encoding="utf-8"?>',
        f'<yml_catalog date="{current_date}">',
        '  <shop>',
        '    <name>–°–µ–∫—Å–ø–µ–¥–∏—Ü–∏—è</name>',
        '    <company>–°–µ–∫—Å–ø–µ–¥–∏—Ü–∏—è</company>',
        '    <url>https://pinkypunk.ru</url>',
        '    <platform>Tilda</platform>',
        '    <currencies>',
        '      <currency id="RUB" rate="1"/>',
        '    </currencies>',
        '    <categories>',
        '      <category id="1">–°–µ–∫—Å-–∏–≥—Ä—É—à–∫–∏</category>',
        '    </categories>',
        '    <offers>'
    ]

    footer_lines = [
        '    </offers>',
        '    <collections>',  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    ]

    # üî• –î–û–ë–ê–í–õ–Ø–ï–ú –ö–ê–†–¢–ò–ù–ö–ò –ö–û–õ–õ–ï–ö–¶–ò–ô ‚Äî –ë–ï–†–ï–ú –ò–• –ò–ó images/ –ü–û vendorCode
    for coll in collections:
        coll_id = coll["id"]
        coll_name = coll["name"]
        coll_url = coll.get("url", "")

        footer_lines.append(f'      <collection id="{coll_id}">')
        footer_lines.append(f'        <name>{coll_name}</name>')
        if coll_url:
            footer_lines.append(f'        <url>{coll_url.strip()}</url>')

        # üî• –ü–†–û–í–ï–†–ö–ê: –µ—Å—Ç—å –ª–∏ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è —ç—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏?
        if coll_id in collection_mapping:
            vendor_code = collection_mapping[coll_id]
            # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
            image_url = get_image_url(vendor_code)  # ‚Üê –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ –µ—Å—Ç—å!
            if image_url:
                footer_lines.append(f'        <picture>{image_url}</picture>')
                log(f"‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ '{coll_name}' –≤–∑—è—Ç–∞ –∏–∑ –∞—Ä—Ç–∏–∫—É–ª–∞ {vendor_code}")

        footer_lines.append('      </collection>')

    footer_lines.extend([
        '    </collections>',  # –ó–∞–∫—Ä—ã–≤–∞–µ–º collections
        '  </shop>',
        '</yml_catalog>'
    ])

    offer_lines = []
    used_ids = set()

    for prod in products:
        try:
            if not prod.get('vendorCode') or not prod.get('name'):
                continue

            unique_id = prod["vendorCode"]
            if unique_id in used_ids:
                continue
            used_ids.add(unique_id)

            # üî• –ó–ê–ú–ï–ù–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –¢–û–í–ê–†–ê ‚Äî —á–µ—Ä–µ–∑ GitHub
            image_url = prod['image']  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Å —Å–∞–π—Ç–∞
            github_image_url = get_image_url(unique_id)
            if github_image_url:
                image_url = github_image_url
                log(f"üîÑ –ó–∞–º–µ–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {unique_id}: {prod['image']} ‚Üí {image_url}")

            offer = [
                f'      <offer id="{unique_id}" available="true">',
                f'        <name>{prod["name"]}</name>',
                f'        <vendor>–°–µ–∫—Å–ø–µ–¥–∏—Ü–∏—è</vendor>',
                f'        <vendorCode>{prod["vendorCode"]}</vendorCode>',
                f'        <model>{prod["name"]}</model>',
                f'        <price>{prod["price"]}</price>',
                f'        <currencyId>RUB</currencyId>',
                f'        <categoryId>1</categoryId>'
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º collectionId, –µ—Å–ª–∏ –µ—Å—Ç—å
            if prod.get('collection_id'):
                offer.append(f'        <collectionId>{prod["collection_id"]}</collectionId>')

            # üî• URL ‚Äî –±–µ–∑ CDATA
            offer.append(f'        <url>{prod["link"].strip()}</url>')

            # üî• –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –±–µ–∑ CDATA
            offer.append(f'        <picture>{image_url}</picture>')

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî –±–µ–∑ CDATA
            for img in prod.get('additional_images', []):
                if img and img != image_url:
                    offer.append(f'        <picture>{img.strip()}</picture>')

            # üî• –û–ø–∏—Å–∞–Ω–∏–µ ‚Äî –í–°–Å –ï–©–Å –í CDATA (—Ç.–∫. –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å & –∏ <)
            if prod.get('description') and prod['description'].strip():
                desc_cdata = f"<![CDATA[{prod['description'].strip()}]]>"
                offer.append(f'        <description>{desc_cdata}</description>')

            # sales_notes
            sales_notes = "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –°–µ–∫—Å–ø–µ–¥–∏—Ü–∏—è."
            offer.append(f'        <sales_notes>{sales_notes}</sales_notes>')

            offer.append('      </offer>')
            offer_lines.extend(offer)

        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ offer –¥–ª—è {prod.get('name', 'unknown')}: {e}")
            continue

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–¥–∞
    full_lines = header_lines + offer_lines + footer_lines

    # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
    if os.path.exists(XML_FILE):
        backup_name = XML_FILE + ".backup"
        shutil.copy2(XML_FILE, backup_name)
        log(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")

    # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å
    try:
        with open(TEMP_XML_FILE, 'w', encoding='utf-8') as f:
            f.write('\n'.join(full_lines))
        os.replace(TEMP_XML_FILE, XML_FILE)
        log(f"‚úÖ XML-—Ñ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {XML_FILE}")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–¥–∞: {e}")


# --- –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê ---
if __name__ == "__main__":
    log("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ pinkypunk.ru")
    progress = load_progress()
    all_products = progress["products"]
    # üî• –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º vendorCode –≤–º–µ—Å—Ç–æ link –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    seen_codes = {p['vendorCode'] for p in all_products if p.get('vendorCode')}

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        context = browser.new_context(user_agent=USER_AGENT)
        page = context.new_page()

        try:
            # –ü–∞—Ä—Å–∏–º –∫–∞—Ç–∞–ª–æ–≥ –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            product_list, collections = parse_catalog_page(page)
            # üî• –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ vendorCode
            new_items = [item for item in product_list if item.get('vendorCode') and item['vendorCode'] not in seen_codes]
            log(f"üÜï –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(new_items)}")

            # –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
            for item in new_items:
                all_products.append(item)
                save_progress(all_products)

            log(f"üéâ –°–æ–±—Ä–∞–Ω–æ {len(new_items)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–¥
            generate_xml(all_products, collections)
            log(f"üéâ –ì–æ—Ç–æ–≤–æ! –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–∏–¥–µ: {len(all_products)}")

        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            save_progress(all_products)
        finally:
            browser.close()
            log("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.")

    log("‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É 'output_pinkypunk'.")
